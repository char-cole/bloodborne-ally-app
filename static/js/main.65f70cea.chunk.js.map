{"version":3,"sources":["components/Links.js","actions/index.js","containers/LinksContainer.js","components/PageHeader.js","components/ErrorWarning.js","components/Docs.js","containers/DocsContainer.js","components/Nothing.js","containers/NothingContainer.js","components/SearchPage.js","components/Search.js","containers/SearchRunesContainer.js","containers/RuneSearchPageContainer.js","containers/SearchGesturesContainer.js","containers/GestureSearchPageContainer.js","components/KeyItemSearchOptions.js","containers/KeyItemSearchOptionsContainer.js","containers/SearchKeyItemsContainer.js","containers/KeyItemSearchPageContainer.js","App.js","serviceWorker.js","reducers/index.js","store.js","state.js","index.js"],"names":["Links","props","navLinks","map","x","i","react_default","a","createElement","react_router_dom","to","url","className","key","onClick","updateResults","name","updateSearch","search","type","value","stuff","toggleChalice","toggle","updateNothing","nothing","connect","state","dispatch","PageHeader","page","description","ErrorWarning","Docs","getTypes","gql","_templateObject","instructionalText","typeDivs","react_apollo_esm","query","_ref","loading","error","data","console","log","components_ErrorWarning","sortedTypes","__schema","types","sort","b","names","id","allTypes","includes","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","fields","field","index","array","required","typeType","ofType","border","length","components_PageHeader","Nothing","SearchPage","this","searchFor","NothingContainer","results","Component","Search","client","onSubmit","Object","asyncToGenerator","regenerator_default","mark","_callee","event","_ref2","wrap","_context","prev","next","preventDefault","variables","searchEntry","searchString","split","toUpperCase","slice","toLowerCase","join","chalice","chaliceCheck","sent","queryType","edges","nothingResults","stop","_x","apply","arguments","onChange","e","target","searchOptions","SearchRunesContainer_templateObject","currentResults","SearchRunesContainer","lineTwo","node","isCovenant","tier","indexOf","toString","effect","SearchGesturesContainer_templateObject","SearchGesturesContainer","encounter","rewardFrom","location","step","quest","firstAvailablePhase","KeyItemSearchOptions","htmlFor","SearchKeyItemsContainer_templateObject","KeyItemSearchOptionsContainer","SearchKeyItemsContainer","source","droppedByBoss","boss","pickUp","isChalice","App","basename","process","role","LinksContainer","style","minHeight","react_router","path","component","KeyItemSearchPageContainer","GestureSearchPageContainer","RuneSearchPageContainer","exact","DocsContainer","Boolean","window","hostname","match","rootReducer","combineReducers","undefined","action","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","reducers","ApolloClient","uri","credentials","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65f70cea.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Links = (props) => {\r\n  return (\r\n    props.navLinks.map((x,i) => {\r\n      return (\r\n        <Link to={x.url} className=\"col-2 text-center\" key={i} onClick={() => props.updateResults([])}>\r\n          {x.name}\r\n        </Link>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nexport default Links;","export function updateSearch(search) {\r\n  return {\r\n    type: \"SEARCH_UPDATED\",\r\n    value: search\r\n  }\r\n}\r\n\r\nexport function updateResults(stuff) {\r\n  return {\r\n    type: \"RESULTS_UPDATED\",\r\n    value: stuff\r\n  }\r\n}\r\n\r\nexport function toggleChalice(toggle) {\r\n  if (toggle) {\r\n    return {\r\n      type: \"TRUE_TO_FALSE\",\r\n      value: toggle\r\n    }\r\n  }\r\n  else {\r\n    return {\r\n      type: \"FALSE_TO_TRUE\",\r\n      value: toggle\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateNothing(nothing) {\r\n  return {\r\n    type: \"NOTHING_UPDATED\",\r\n    value: nothing\r\n  }\r\n}","import Links from \"../components/Links\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateResults } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  navLinks: state.navLinks\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Links);\r\n","import React from 'react';\r\n\r\nconst PageHeader = (props) => {\r\n  return (\r\n    <header className=\"text-left mb-4\">\r\n      <div className=\"w-75 p-2 mx-auto rounded shadow bg-danger text-white\">\r\n        <h5 className=\"m-0\">\r\n          Note: The Bloodborne Ally API is still in development.\r\n          <br/>\r\n          <small>\r\n            Apps will not be able to make queries without the owner of of the API activating it.\r\n            To use the API in this app or another, contact the author at github.com/char-cole for more info.\r\n          </small>\r\n        </h5>\r\n      </div>\r\n      <h2 className=\"font-weight-bold\">\r\n        {props.page}\r\n      </h2>\r\n      <h5 className=\"pr-5\">\r\n        { props.description || \"Find \"+props.page+\" by name\"}\r\n      </h5>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default PageHeader;","import React from 'react';\r\n\r\nconst ErrorWarning = () => {\r\n  return (\r\n    <div className=\"col-12 col-md-6 p-5\">\r\n      <div className=\"border border-danger rounded p-1\">\r\n        <p className=\"border border-danger rounded p-3\">\r\n          There was an <b>error</b>. Most likely, the app failed to fetch because the API is asleep.\r\n          Check the console log for more information.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorWarning;","import React from 'react';\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport PageHeader from \"./PageHeader.js\"\r\nimport ErrorWarning from \"./ErrorWarning.js\"\r\n\r\nconst Docs = (props) => {\r\n  let page = \"Docs\"\r\n  let getTypes = gql`{\r\n    __schema {\r\n      types {\r\n        name\r\n        description\r\n        fields {\r\n          name\r\n          description\r\n          type {\r\n            name\r\n            ofType {\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\n  let instructionalText = (\r\n    <div className=\"col-12 col-md-6 mt-10 text-left\">\r\n      <h5>\r\n        How to use this API\r\n      </h5>\r\n      <p>\r\n        To find a specific entry, valid queries are of the format&nbsp;<code>Bloodborne_get[Type]By[Name/ID]</code>\r\n      </p>\r\n      <p>\r\n        To list all entries (currently capped at first 10 results), valid queries are of the format&nbsp;\r\n        <code>Bloodborne_list[Type]</code>. This query allows filters.\r\n      </p>\r\n      <p>\r\n        In a GraphQL API, fields can be populated by specific entries of other type.\r\n        For example, the type \"Location\" has a field named \"headstone\". Instead of a\r\n        String, the value of this field is a \"Bloodborne_Headstone\". When querying a\r\n        Location, the query can extend into the fields of the Headstone type.\r\n      </p>\r\n      <p>\r\n        This allows a single query to begin at any node in the API and reach almost any other node.\r\n      </p>\r\n      <p>\r\n        For example, the query <code>Bloodborne_getRuneByName(name: \"Blood Rapture 3\")</code> could return\r\n        any of the fields of the type Bloodborne_Rune. Since some of these fields are themselves\r\n        types, it could also return any of the fields of <i>those</i> types. This can continue\r\n        infinitely.\r\n      </p>\r\n      <p>\r\n        If we know the rune \"Blood Rapture 3\" is dropped by an NPC (in this case, Bloody Crow of Cainhurst),\r\n        we could access the name of a specific Encounter (a step of a Quest) that would be made unavailable\r\n        by the beginning of whichever Phase \"Blood Rapture 3\" first becomes available. The following path\r\n        identifies this information (in this case, a string) in the data object returned by the above query:\r\n      </p>\r\n      <p>\r\n        <code>\r\n          data.droppedByNPC.edges[0].node.firstAvailablePhase.blocksEncounters.edges[0].node.name\r\n        </code>\r\n      </p>\r\n      <p>\r\n        This would return the name (<code>.name</code>)\r\n        of the first encounter (<code>.edges[0].node</code>)\r\n        in an array of encounters (<code>.edges</code>)\r\n        that become unavailable (<code>.blocksEncounters</code>)\r\n        at the start of the Blood Moon phase (<code>.firstAvailablePhase</code>),\r\n        which is when the encounter (<code>.droppedByNPC</code>)\r\n        with Bloody Crow of Cainhurst (<code>data.droppedByNPC.edges[0].node.target.name</code>)\r\n        first becomes available during Eileen's Quest (<code>data.droppedByNPC.edges[0].node.quest.name</code>).\r\n      </p>\r\n    </div>\r\n  )\r\n\r\n  let typeDivs = (\r\n    <Query query={getTypes}>\r\n      {({ loading, error, data }) => {\r\n        if (loading) return null;\r\n        if (error) {\r\n          console.log(error)\r\n          return (\r\n            <div className=\"row\">\r\n              <ErrorWarning/>\r\n              {instructionalText}\r\n            </div>\r\n          )\r\n        }\r\n\r\n        let sortedTypes = data.__schema.types.sort((a,b) => {\r\n          let names = [a.name, b.name];\r\n          return (names[0] > names[1]) ? 1 : -1\r\n        });\r\n\r\n        return (\r\n            <div className=\"row\">\r\n              <div id=\"accordion\" className=\"col-12 col-md-6\">\r\n                {sortedTypes.map((x,i) => {\r\n                  if (props.allTypes.includes(x.name)) {\r\n                    return (\r\n                      <div key={i} className=\"card border-dark mb-1\">\r\n                        <div className=\"card-header bg-dark text-left\" id={\"heading-\"+i}>\r\n                          <h5 className=\"mb-0\">\r\n                            <button\r\n                              className=\"btn btn-link text-white\"\r\n                              data-toggle=\"collapse\"\r\n                              data-target={\"#collapse-\"+i}\r\n                              aria-expanded=\"false\"\r\n                              aria-controls={\"collapse-\"+i}\r\n                            >\r\n                              {x.name}\r\n                            </button>\r\n                          </h5>\r\n                        </div>\r\n                        <div id={\"collapse-\"+i}\r\n                          className=\"collapse\"\r\n                          aria-labelledby={\"heading-\"+i}\r\n                          data-parent=\"#accordion\"\r\n                        >\r\n                          <div className=\"card-body\">\r\n                            <small className=\"px-1 mb-3 d-block\">{x.description}</small>\r\n                            <ul className=\"text-left list-unstyled py-0 px-1 m-0\">\r\n                              <li className=\"row py-2 font-weight-bold\">\r\n                                <p className=\"col-5\">\r\n                                  Field\r\n                                </p>\r\n                                <p className=\"col-7\">\r\n                                  Type\r\n                                </p>\r\n                              </li>\r\n                              {x.fields.map((field, index, array) => {\r\n                                let required;\r\n                                let typeType = field.type.name;\r\n                                if (field.type.ofType) {\r\n                                  required = \"*\";\r\n                                  typeType = field.type.ofType.name;\r\n                                }\r\n                                let border = \" border-bottom\";\r\n                                if (index === array.length-1) border = \"\";\r\n                                if (field.name === \"id\") field.description = \"\";\r\n                                return (\r\n                                  <li key={index} className={\"row py-2\"+border}>\r\n                                    <div className=\"col-5 border-right\">\r\n                                      {field.name}<span className=\"text-danger\">{required}</span>\r\n                                    </div>\r\n                                    <span className=\"col-7\">\r\n                                      {typeType}\r\n                                    </span>\r\n                                    <small className=\"col-12 text-muted\">{field.description}</small>\r\n                                  </li>\r\n                                )\r\n                              })}\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n                  else return null;\r\n                })}\r\n              </div>\r\n              {instructionalText}\r\n            </div>\r\n        )\r\n      }}\r\n    </Query>\r\n  )\r\n\r\n  return (\r\n    <div className=\"pb-3\">\r\n      <PageHeader\r\n        page={page}\r\n        description=\"This page lists the entire schema. Each type displays each of its available fields.\"\r\n      ></PageHeader>\r\n      {typeDivs}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Docs","import { connect } from \"react-redux\";\r\nimport Docs from \"../components/Docs\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tallTypes: state.allTypes\r\n});\r\n\r\nexport default connect(mapStateToProps)(Docs);","import React from 'react';\r\n\r\nconst Nothing = (props) => {\r\n  return (\r\n    <h5 className=\"col-12 text-center\">\r\n      {props.nothing}\r\n    </h5>\r\n  )\r\n}\r\n\r\nexport default Nothing;","import { connect } from \"react-redux\";\r\nimport Nothing from \"../components/Nothing\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  nothing: state.nothing\r\n});\r\n\r\nexport default connect(mapStateToProps)(Nothing);","import React, { Component } from 'react';\r\nimport PageHeader from \"./PageHeader.js\"\r\nimport NothingContainer from '../containers/NothingContainer.js';\r\n\r\nclass SearchPage extends Component {\r\n\r\n  componentWillUnmount() {\r\n    this.props.updateResults([])\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <PageHeader page={this.props.page}></PageHeader>\r\n        {this.props.searchFor}\r\n        <div className=\"row mt-5\">\r\n          <NothingContainer/>\r\n          {this.props.results}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchPage;","import React from 'react';\r\nimport { ApolloConsumer } from \"react-apollo\";\r\n\r\nconst Search = (props) => {\r\n\r\n  let capitalize = (searchEntry) => {\r\n    let searchArray = searchEntry.split(' ').map(x => {\r\n      return x[0].toUpperCase() + x.slice(1).toLowerCase()\r\n    });\r\n    return searchArray.join(' ')\r\n  }\r\n\r\n  return (\r\n    <ApolloConsumer>\r\n      {client => (\r\n        <form className=\"row my-3 mx-0\" onSubmit={async (event) => {\r\n          event.preventDefault();\r\n          const { data } = await client.query({\r\n            query: props.query,\r\n            variables: {\r\n              \"search\": capitalize(props.searchString),\r\n              \"chalice\": props.chaliceCheck\r\n            }\r\n          });\r\n          props.updateResults(data[props.queryType].edges);\r\n          console.log(data[props.queryType].edges);\r\n          if(data[props.queryType].edges[0]) props.updateNothing(\"\")\r\n          else props.updateNothing(props.nothingResults)\r\n        }}>\r\n          <input type=\"text\"\r\n            className=\"w-50 rounded px-1\"\r\n            value={props.searchString}\r\n            onChange={(e) => props.updateSearch(e.target.value)}\r\n          ></input>\r\n          <button className=\"btn btn-light border border-dark ml-2\">\r\n            Search\r\n          </button>\r\n          {props.searchOptions}\r\n        </form>\r\n      )}\r\n    </ApolloConsumer>\r\n  )\r\n}\r\n\r\nexport default Search;","import { connect } from \"react-redux\";\r\nimport gql from \"graphql-tag\";\r\nimport Search from \"../components/Search\";\r\nimport { updateSearch, updateResults, updateNothing } from \"../actions\";\r\n\r\nlet query = gql`\r\nquery getTheseRunes($search: String!) {\r\n  Bloodborne_listRune(filter: {\r\n    node: {\r\n      name: {\r\n        contains: $search\r\n      }\r\n    }\r\n  }) {\r\n    edges {\r\n      node {\r\n        id\r\n        name\r\n        tier\r\n        effect\r\n        isCovenant\r\n        pickUp {\r\n          name\r\n        }\r\n        droppedByNPC {\r\n          edges {\r\n            node {\r\n              name\r\n              quest {\r\n                name\r\n              }\r\n              step\r\n              location {\r\n                name\r\n              }\r\n              firstAvailablePhase {\r\n                name\r\n              }\r\n              target {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchString: state.searchString,\r\n  currentResults: state.currentResults,\r\n  query: query,\r\n  queryType: \"Bloodborne_listRune\",\r\n  nothingResults: \"No Runes found. Try Again.\"\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateSearch: (search) => {\r\n    dispatch(updateSearch(search))\r\n  },\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  },\r\n  updateNothing: (nothing) => {\r\n    dispatch(updateNothing(nothing))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport SearchPage from \"../components/SearchPage\";\r\nimport SearchRunesContainer from \"../containers/SearchRunesContainer.js\"\r\nimport {  updateResults } from \"../actions\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  }\r\n})\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchFor: <SearchRunesContainer></SearchRunesContainer>,\r\n  page: \"Runes\",\r\n\tresults: state.currentResults.map((x,i) => {\r\n    let lineTwo;\r\n    let name = x.node.name;\r\n    if (x.node.isCovenant) lineTwo = \"This is a covenant rune.\"\r\n    else {\r\n      lineTwo = \"Tier \"+x.node.tier;\r\n      name = x.node.name.slice(0, x.node.name.indexOf(\" \"+x.node.tier.toString()))\r\n    }\r\n    return (\r\n      <div className=\"col-6 col-md-4 mb-3\" key={i}>\r\n        <div className=\"card border-dark\">\r\n          <div className=\"card-header bg-dark text-white\">\r\n            <h5>{name}</h5>\r\n            <p>{lineTwo}</p>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <p>{x.node.effect}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SearchPage);","import { connect } from \"react-redux\";\r\nimport gql from \"graphql-tag\";\r\nimport Search from \"../components/Search\";\r\nimport { updateSearch, updateResults, updateNothing } from \"../actions\";\r\n\r\nlet query = gql`\r\n  query searchGesturesByName($search: String!) {\r\n    Bloodborne_listGesture(filter: {\r\n      node: {\r\n        name: {\r\n          contains: $search\r\n        }\r\n      }\r\n    }) {\r\n      edges {\r\n        node {\r\n          name\r\n          rewardFrom {\r\n            edges {\r\n              node {\r\n                name\r\n                quest {\r\n                  name\r\n                }\r\n                step\r\n                location {\r\n                  name\r\n                }\r\n                firstAvailablePhase {\r\n                  name\r\n                }\r\n                target {\r\n                  name\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchString: state.searchString,\r\n  currentResults: state.currentResults,\r\n  query: query,\r\n  queryType: \"Bloodborne_listGesture\",\r\n  nothingResults: \"No Gestures found. Try again.\"\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateSearch: (search) => {\r\n    dispatch(updateSearch(search))\r\n  },\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  },\r\n  updateNothing: (nothing) => {\r\n    dispatch(updateNothing(nothing))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport SearchPage from \"../components/SearchPage\";\r\nimport SearchGesturesContainer from './SearchGesturesContainer';\r\nimport {  updateResults } from \"../actions\";\r\n\r\nupdateResults([]);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  }\r\n})\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchFor: <SearchGesturesContainer></SearchGesturesContainer>,\r\n  page: \"Gestures\",\r\n\tresults: state.currentResults.map((x,i) => {\r\n    console.log(x)\r\n    let encounter = x.node.rewardFrom.edges[0].node;\r\n    return (\r\n      <div className=\"col-6 col-md-4\" key={i}>\r\n        <div className=\"card border-dark\">\r\n          <div className=\"card-header bg-dark text-white\">\r\n            <h5>{x.node.name}</h5>\r\n            <p>Obtained from {encounter.target.name} in {encounter.location.name}</p>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <p>{encounter.name}</p>\r\n            <small>Step {encounter.step} of {encounter.quest.name}</small>\r\n            <small className=\"d-block\">First available during {encounter.firstAvailablePhase.name}</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SearchPage);","import React from 'react'\r\n\r\nconst KeyItemSearchOptions = (props) => {\r\n  return (\r\n    <div className=\"col-12\">\r\n      <label htmlFor=\"chaliceCheckBox\" className=\"form-label mr-3\">\r\n        Search for Chalices?\r\n      </label>\r\n      <input id=\"chaliceCheckBox\" type=\"checkbox\" value={props.chaliceCheck} onChange={()=> {\r\n        props.toggleChalice(props.chaliceCheck);\r\n      }}>\r\n      </input>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default KeyItemSearchOptions;","import { connect } from \"react-redux\";\r\nimport KeyItemSearchOptions from \"../components/KeyItemSearchOptions\";\r\nimport { toggleChalice } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  toggleChalice: state.toggleChalice\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleChalice: (toggle) => {\r\n    dispatch(toggleChalice(toggle))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyItemSearchOptions);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport gql from \"graphql-tag\";\r\nimport Search from \"../components/Search\";\r\nimport { updateSearch, updateResults, updateNothing } from \"../actions\";\r\nimport KeyItemSearchOptionsContainer from \"../containers/KeyItemSearchOptionsContainer\";\r\n\r\nlet query = gql`\r\n  query searchChalicesByName($search: String!, $chalice: Boolean!) {\r\n    Bloodborne_listKeyItem(filter: {\r\n      node: {\r\n        isChalice: $chalice,\r\n        name: {\r\n          contains: $search\r\n        }\r\n      }\r\n    }) {\r\n      edges {\r\n        node {\r\n          name\r\n          pickUp {\r\n            name\r\n          }\r\n          droppedByBoss {\r\n            edges {\r\n              node {\r\n                name\r\n                location {\r\n                  name\r\n                }\r\n                quickestRoute {\r\n                  name\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchString: state.searchString,\r\n  currentResults: state.currentResults,\r\n  query: query,\r\n  queryType: \"Bloodborne_listKeyItem\",\r\n  chaliceCheck: state.chaliceCheck,\r\n  nothingResults: \"No Key Items found. Make sure Chalices are toggled on if searching for a Chalice.\",\r\n  searchOptions: <KeyItemSearchOptionsContainer></KeyItemSearchOptionsContainer>\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateSearch: (search) => {\r\n    dispatch(updateSearch(search))\r\n  },\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  },\r\n  updateNothing: (nothing) => {\r\n    dispatch(updateNothing(nothing))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport SearchPage from \"../components/SearchPage\";\r\nimport SearchKeyItemsContainer from './SearchKeyItemsContainer';\r\nimport {  updateResults, toggleChalice } from \"../actions\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateResults: (stuff) => {\r\n    dispatch(updateResults(stuff))\r\n  },\r\n  toggleChalice: (toggle) => {\r\n    dispatch(toggleChalice(toggle))\r\n  }\r\n})\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchFor: <SearchKeyItemsContainer></SearchKeyItemsContainer>,\r\n  page: \"Key Items\",\r\n  chaliceCheck: state.chaliceCheck,\r\n\tresults: state.currentResults.map((x,i) => {\r\n    let source;\r\n    let location;\r\n    if(x.node.droppedByBoss.edges[0]) {\r\n      let boss = x.node.droppedByBoss.edges[0].node\r\n      source = boss.name.split(' (')[0];\r\n      location = boss.location.name;\r\n    }\r\n    else if(x.node.pickUp) {\r\n      if (x.node.isChalice) {\r\n        source = \"Chalice Bath Messengers\";\r\n      } else source = \"exploration or interaction\"\r\n      location = x.node.pickUp.name;\r\n    }\r\n    else {\r\n      source = \"an unknown source. This is probably given by a quest.\";\r\n      location = \"an unknown location.\"\r\n    }\r\n    return (\r\n      <div className=\"col-6 col-md-4 mb-3\" key={i}>\r\n        <div className=\"card border-dark\">\r\n          <div className=\"card-header bg-dark text-white\">\r\n            <h5>\r\n              {x.node.name}\r\n            </h5>\r\n            <p>\r\n              <i>Found in</i><br/>\r\n              {location}\r\n            </p>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <p>\r\n              Acquired from {source}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SearchPage);","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport LinksContainer from './containers/LinksContainer';\r\nimport DocsContainer from './containers/DocsContainer';\r\nimport RuneSearchPageContainer from './containers/RuneSearchPageContainer';\r\nimport GestureSearchPageContainer from './containers/GestureSearchPageContainer';\r\nimport KeyItemSearchPageContainer from './containers/KeyItemSearchPageContainer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <div>\r\n          <div id=\"wrapper\">\r\n            <nav\r\n              className=\"container navbar-fixed-top bg-light border-bottom\"\r\n              role=\"navigation\"\r\n            >\r\n              <h1>\r\n                Bloodborne Ally\r\n              </h1>\r\n              <div className=\"row\">\r\n                <LinksContainer/>\r\n              </div>\r\n            </nav>\r\n            <div className=\"container bg-light pt-3\" style={{minHeight: \"100vh\"}}>\r\n              <Switch>\r\n                <Route path=\"/items\" component={KeyItemSearchPageContainer} />\r\n                <Route path=\"/gestures\" component={GestureSearchPageContainer} />\r\n                <Route path=\"/runes\" component={RuneSearchPageContainer} />\r\n                <Route exact path=\"/\" component={DocsContainer} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\r\n\r\nfunction allTypes(state=[]) {\r\n  return state;\r\n}\r\n\r\nfunction searchString(state=\"\", action) {\r\n  if (action.type === \"SEARCH_UPDATED\") {\r\n    return action.value;\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction currentResults(state=[], action) {\r\n  if (action.type === \"RESULTS_UPDATED\") {\r\n    return action.value;\r\n  }\r\n  else if (action.type === \"NO_RESULTS\") {\r\n    return [];\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction chaliceCheck(state=false, action) {\r\n  if (action.type === \"FALSE_TO_TRUE\") {\r\n    return true;\r\n  }\r\n  else if (action.type === \"TRUE_TO_FALSE\") {\r\n    return false;\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction nothing(state=\"\", action) {\r\n  if (action.type === \"NOTHING_UPDATED\") return action.value\r\n  return state\r\n}\r\n\r\nfunction navLinks(state=[], action) {\r\n  return state;\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  allTypes, searchString, currentResults, chaliceCheck, nothing, navLinks\r\n});\r\n\r\nexport default rootReducer;","import state from \"./state\";\r\nimport reducers from \"./reducers\";\r\nimport {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers =\r\n typeof window === \"object\" &&\r\n window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n applyMiddleware(thunk)\r\n);\r\nconst store = createStore(reducers,state,enhancer);\r\nexport default store;\r\n","export default {\r\n\tallTypes: [\r\n\t\t\"Bloodborne_Attire\",\r\n\t\t\"Bloodborne_AttireSet\",\r\n\t\t\"Bloodborne_AttireSlot\",\r\n\t\t\"Bloodborne_Badge\",\r\n\t\t\"Bloodborne_Boss\",\r\n\t\t\"Bloodborne_Element\",\r\n\t\t\"Bloodborne_Encounter\",\r\n\t\t\"Bloodborne_Gesture\",\r\n\t\t\"Bloodborne_Headstone\",\r\n\t\t\"Bloodborne_HunterTool\",\r\n\t\t\"Bloodborne_Imprint\",\r\n\t\t\"Bloodborne_KeyItem\",\r\n\t\t\"Bloodborne_Location\",\r\n\t\t\"Bloodborne_LootSource\",\r\n\t\t\"Bloodborne_Offhand\",\r\n\t\t\"Bloodborne_Phase\",\r\n\t\t\"Bloodborne_Quest\",\r\n\t\t\"Bloodborne_Rune\",\r\n\t\t\"Bloodborne_Shape\",\r\n\t\t\"Bloodborne_Weapon\",\r\n\t\t\"Bloodborne_WeaponVersion\"\r\n\t],\r\n\tsearchString: \"\",\r\n\tcurrentResults: [],\r\n\tchaliceCheck: false,\r\n\tnothing: \"\",\r\n\tnavLinks: [\r\n\t\t{url: \"/\", name: \"Home\"},\r\n\t\t{url: \"/runes\", name: \"Rune Search\"},\r\n\t\t{url: \"/gestures\", name: \"Gesture Search\"},\r\n\t\t{url: \"/items\", name: \"Key Item Search\"},\r\n\t]\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nconst client = new ApolloClient({\n    uri: \"https://bloodborne-ally-9834e999.us-east1.slicknode.com\",\n    credentials: 'same-origin'\n  });\n\nReactDOM.render(\n    <Provider store={store}>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}